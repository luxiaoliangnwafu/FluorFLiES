model.state.coexist <- c(rx = 4, ry = 4, kx = 10, ky = 10, alphaxy = 0.5, alphayx = 0.5)
dx <- Model2String(model = dxstring, parms = model.state.coexist)
dy <- Model2String(model = dxstring, parms = model.state.coexist)
init.cond <- c(x = 3, y = 10)
sigma = 0.1
timesteps = 1000
deltat = 0.1
timesimulation <- TSTraj(y0 = init.cond, time = timesteps, deltat = deltat, x.rhs = dx, y.rhs = dy, sigma = sigma)
TSPlot(mat = timesimulation, deltat = deltat)
TSPlot(mat = timesimulation, deltat = model.deltat, dim = 2)
TSDensity(mat = timesimulation, dim = 1)
TSDensity(mat = timesimulation, dim = 2)
############################################################
##### Step 3:
bounds.x = c (-5, 15)
bounds.y = c (-5, 15)
step.number.x = 2000
step.number.y = 2000
xinit = 6.667
yinit = 6.667
coexist <- QPotential(x.rhs = dx, x.start = xinit, x.bound = bounds.x,
x.num.steps = step.number.x, y.rhs = dx, y.start = yinit,
y.bound = bounds.y, y.num.steps = step.number.y)
QPContour(surface = coexist, dens = c(1000, 1000), x.bound = bounds.x, y.bound = bounds.y, c.parm = 0)
coexist.BOUNCE <- QPotential(x.rhs = dx, x.start = xinit, x.bound = bounds.x, x.num.steps = step.number.x,
y.rhs = dy, y.start = yinit, y.bound = bounds.y, y.num.steps = step.number.y,
bounce = 'b')
QPContour(surface = coexist.BOUNCE, dens = c(1000,1000), x.bound = bounds.x, y.bound = bounds.y, c.parm = 10)
hist(coexist.BOUNCE)
coexist.BOUNCE.REMOVE <- coexist.BOUNCE
coexist.BOUNCE.REMOVE[coexist.BOUNCE.REMOVE > 25]
QPContour(surface = coexist.BOUNCE.REMOVE, dens = c(1000,1000), x.bound = bounds.x, y.bound = bounds.y, c.parm = 10)
############################################################
##### Step 5:
require(plot3D)
subsample.x = 200
subsample.y = 200
my.theta = 110
my.phi = 0
my.zlim = c(-0.001, 25)
my.zlab = intToUtf8(0x03A6)
coexist.subsample <- coexist[
seq(1, step.number.x, step.number.x/subsample.x),
seq(1, step.number.y, step.number.y/subsample.y)
]
install.packages("rgdal")
ad
asd
asd
asd
asd
as.data.frame(sad)
as
das
das
das
da
rr
r
r
install.packages(rgdal)
install.packages('rgdal')
install.packages(c("acepack", "boot", "car", "cluster", "codetools", "colorspace", "digest", "evaluate", "foreign", "formatR", "ggplot2", "highr", "Hmisc", "htmltools", "irlba", "knitr", "lattice", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "mime", "multcomp", "mvtnorm", "nlme", "packrat", "pbkrtest", "plyr", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "reshape", "reshape2", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "scales", "sp", "SparseM", "stringi", "stringr", "survival", "TH.data", "vcd", "yaml", "zoo"))
install.packages("rgdal")
install.packages('rgeos', type="source")
install.packages('rgdal', type="source")
library()sp
library(sp)
library(rgdal)
install.packages(rgdal)
install.packages(rgdal,from='source')
install.packages(‘rgdal’,repos=”http://www.stats.ox.ac.uk/pub/RWin“)
install.packages(‘rgdal’,repos=”http://www.stats.ox.ac.uk/pub/RWin')
install.packages(‘rgdal’,repos='http://www.stats.ox.ac.uk/pub/RWin')
install.packages('rgdal',repos='http://www.stats.ox.ac.uk/pub/RWin')
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/Library/Frameworks/PROJ.framework/Headers', '--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
pURL <- 'https://cran.r-project.org/bin/macosx/el-capitan/contrib/3.4/rgdal_1.2-7.tgz'
install.packages(pURL, contriburl=NULL, type="source")
library(lattice)
fn = "Aus.QLD.ddd20070101aaa.tiff"
string
string = "Aus"
regexpr(string, as.character(fn))[1]
regexpr(string, as.character(fn))[2]
regexpr(string, as.character(fn))[1]
as.yearmon
??as.yearmon
library(zoo)
install.packages("zoo")
library(zoo)
as.yearmon("200701")
as.yearmon("20070101")
format(as.yearmon("20070101", format = "%Y%m"), "%Y-%m")
string = "Aus.QLD.ddd20070101aaa.tiff"
pattern = "ddd"
year.loc = regexpr(fn, as.character(string))[1]
year.loc
pattern = "ddd"
year.loc = regexpr(pattern, as.character(string))[1]
pattern = "ddd"
year.loc
string = "Aus.QLD.ddd20070101aaa.tiff"
pattern = "ddd"
year.loc = regexpr(pattern, as.character(string))[1]
year.loc = year.loc + length(pattern)
format(as.yearmon(substr(string, year.loc, year.loc + 8), format = "%Y%m"), "%Y-%m")
year.loc
year.loc = regexpr(pattern, as.character(string))[1]
year.loc = year.loc + length(pattern) + 1
format(as.yearmon(substr(string, year.loc, year.loc + 8), format = "%Y%m"), "%Y-%m")
substr(string, year.loc, year.loc + 8)
substr(string, year.locregexpr(pattern, as.character(string))[1], year.loc + 8)
regexpr(pattern, as.character(string))[1]
length(pattern)
len(pattern)
length("asd")
string.length("asd")
stri_length("asd")
nchar(string)
pattern = "ddd"
year.loc = regexpr(pattern, as.character(string))[1]
year.loc = year.loc + nchar(pattern)
year.loc
format(as.yearmon(substr(string, year.loc, year.loc + 8), format = "%Y%m"), "%Y-%m")
format(as.yearmon(substr(string, year.loc, year.loc + 8), format = "%Y%m%d"), "%Y-%m-%d")
a <- c(1,4,5)
plot(a)
??plot
plot(a, panel = lines)
b <- c(2,3,5)
plot(a,b)
plot(a,b)
plot(b)
plot(a,b)
library(rLiDAR)
library(raster)
library(rgeos)
library(sp)
library(ggplot2)
macDir = "~/Dropbox/Share_with_MAC/PhD_Studies/Model_work/Experiment_2_Alice_spring&TiTree_seasonal/materials/alice_spring/out"
chm<-raster(file.path(macDir, "AliceSpring_18_22.asc"))
macDir = "~/Dropbox/Share_with_MAC/"
chm<-raster(file.path(macDir, "AliceSpring_18_22.asc"))
plot(chm)
minH = 2
chm.matrix <- as.matrix(chm)
if (isTRUE(isAlmostEmpty(chm, minH))){
print(paste0("Ignore: ", name.raw))
return (0)
}
isAlmostEmpty <- function(data.raster, minH){
#data.raster = chm
data.matx <- as.matrix(data.raster)
numCells = nrow(data.matx) * ncol(data.matx)
data.matx[data.matx<minH] <- NA
#flag = TRUE
n = 0
gate =  0.7 * numCells
for(i in 1:nrow(data.matx)){
for(j in 1:ncol(data.matx)){
if (is.na(data.matx[i,j])){
n = n + 1
if (n > gate){
return (TRUE)
}
}
}
}
return(FALSE)
}
FindTreesCHM<-function(chm, fws = 5, minht = 1.37)
{
# fws = 3
# minht = 1.37
# chm = chm.grass
# chm<-raster(file.path(mainDir, outDir, "Example.asc"))
# chm = sCHM
if (class(chm)[1] != "RasterLayer") {
chm <- raster(chm)
}
if (class(fws) != "numeric") {
stop("The fws parameter is invalid. It is not a numeric input")
}
if (class(minht) != "numeric") {
stop("The minht parameter is invalid. It is not a numeric input")
}
w <- matrix(c(rep(1, fws * fws)), nrow = fws, ncol = fws)
chm[chm < minht] <- NA
f <- function(chm) max(chm)
rlocalmax <- focal(chm, fun = f, w = w, pad = TRUE, padValue = NA)
setNull <- chm == rlocalmax
XYmax <- SpatialPoints(xyFromCell(setNull, Which(setNull == 1, cells = TRUE)), proj4string = crs(chm))                # Edited
htExtract <- over(XYmax, as(chm, "SpatialGridDataFrame"))
treeList <- cbind(coordinates(XYmax), htExtract)              # Edited
colnames(treeList) <- c("x", "y", "height")
return(treeList)
}
countTreeGrassArea <- function(chm, name.raw, mainDir, outDir, boundaryTrees){
empty.area = 0
area.tree = 0
area.grass = 0
#######
# Remove the crown from CHM
# 1. view a point from CHM
# 2. if (point in boundaryTrees && height > threshold), then set the point value as 0
#
height.threshold.max = 2.5
height.threshold.min = 0.1
chm.matrix = as.matrix(chm)
chm.grass <- chm.matrix
for(j in 1:extent(chm)[2]){
for (i in 1:extent(chm)[4]){
# print(i)
#i = extent(chm)[2] - i
if (!is.na(chm.matrix[i,j])){
# (x, y) in boundaryTrees is reverse
y.point = c(extent(chm)[4] - i)
x.point = c(j)
points <- cbind(x.point, y.point)
points <- SpatialPoints(points)
result.over <- over(points, boundaryTrees)
if ( (!is.na(result.over)) || (chm.matrix[i,j] > height.threshold.max)){
chm.grass[i, j] = 0
if (i <= 30 && j <= 30)
area.tree = area.tree + 1
}
}
}
}
# plot(as.raster(chm.grass))
print(paste0("Tree area is ", area.tree / 900, "%"))
#plot(chm.grass)
# remove the noise points
for(j in 1:extent(chm)[2]){
for (i in 1:extent(chm)[4]){
if ((chm.grass[i,j] > height.threshold.min && chm.grass[i,j] < height.threshold.max) || is.na(chm.grass[i,j])){
# chm.test[i,j] = NA
}
else{
chm.grass[i,j] = 0
}
}
}
# plot(chm.grass)
# length(matrix.grass[,1])
# mean(matrix.grass, na.rm = TRUE)
df.grass <- data.frame()
for (i in 1:length(chm.grass[,1])){
for (j in 1:length(chm.grass[1,])){
x = length(chm.grass[,1]) - i + 1
#x = i
#print("i = " + str(x))
#print("j = " + str(j))
if (chm.grass[x, j] != 0 && !is.na(chm.grass[x, j])){
temp.c <- c(i, j, chm.grass[x, j])
df.grass <- rbind(df.grass, temp.c)
if (i <= 30 && j <= 30)
area.grass = area.grass + 1
}
}
}
if(nrow(df.grass) != 0){
colnames(df.grass) <- c("X","Y","Ht")
}
write.csv(df.grass, file.path(mainDir, outDir, paste0(name.raw, "_pre_grassData.csv")))
print(paste0("grass area is ", area.grass))
print(paste0("Tree and grass area is ", area.grass + area.tree))
ground.LAI = area.grass / (30 * 30)
print(paste0("Ground LAI is ", ground.LAI))
df.result <- data.frame(area.tree,area.grass, ground.LAI)
write.csv(df.grass, file.path(mainDir, outDir, paste0(name.raw, "_areaData.csv")))
}
minH = 2
chm.matrix <- as.matrix(chm)
if (isTRUE(isAlmostEmpty(chm, minH))){
print(paste0("Ignore: ", name.raw))
return (0)
}
x.min <- extent(chm)[1]
y.min <- extent(chm)[3]
new.extent <- extent(extent(chm)[1] - x.min, extent(chm)[2] - x.min, extent(chm)[3] - y.min, extent(chm)[4] - y.min)
chm <- setExtent(chm, new.extent, keepres = TRUE)
plot(chm)
ws<-3 # dimension 3x3
filter<-"Gaussian"
sigma<-0.5
sCHM<-CHMsmoothing(chm, filter, ws, sigma)
plot(sCHM, main= fname, xlab="X (m)", ylab="Y (m)")
plot(sCHM)
fws = 3 # dimention 3x3
minht = 2.0
loc<-FindTreesCHM(sCHM, fws, minht)
summary(loc)
maxcrown=10
exclusion=0.5
canopy<-ForestCAS(sCHM, loc, maxcrown, exclusion)
boundaryTrees<-canopy[[1]]
temp.c = c()
for (i in nrow(boundaryTrees):1){
temp.c <- append(temp.c, boundaryTrees@polygons[[i]]@area)
}
canopyList<-canopy[[2]] # list of ground-projected areas of individual tree canopies
summary(canopyList)     # summary
canopyList <- canopyList[,-4]
canopyList <- cbind(canopyList,temp.c)
colnames(canopyList) <- c("x", "y", "z", "ca")
canopyList$crad<-sqrt(canopyList$ca/pi) # Compute the corresponding crown radii
write.csv(canopyList, file.path(mainDir, outDir, paste0(name.raw, "_pre_treeData.csv")))
XY<-SpatialPoints(canopyList[,1:2])    # Spatial points
XY<-data.frame(XY) # Converted to a dataframe
names(XY)[names(XY)=="longitude"]<-"x"
names(XY)[names(XY)=="latitude"]<-"y"
CHMdf <- rasterToPoints(sCHM)
CHMdf <- data.frame(CHMdf)
colnames(CHMdf) <- c("X","Y","Ht")
b.chm <- seq(0,6,1)
plot <- ggplot(CHMdf,aes(X,Y)) +
geom_tile(aes(fill=Ht)) +
scale_fill_gradientn(name="Canopy Height",colours = terrain.colors(length(b.chm))[length(b.chm):1],breaks=b.chm) +
geom_polygon(data = fortify(boundaryTrees), aes(x=long, y=lat,
group = group),colour='black', fill='transparent')+
geom_point(data=XY, aes(x=x, y=y), color="black", shape=3, size=0.5)+
scale_shape_discrete(name = "Tree Locations", labels=c("Tree Centroid","")) +
scale_alpha(range = c(0, 0.5)) +
ggtitle("Location map showing individual trees and associated crown areas") +
coord_equal() + theme_bw()
plot
??tile.list
install.packages("RODBC")
library(RODBC)
rddall <- odbcConnectAccess("~/downloads/ICRAF_ISRIC_Spectral_library.mdb")
??odbcConnectAccess
rddall <- odbcConnectAccess2007("~/downloads/ICRAF_ISRIC_Spectral_library.mdb")
??RODBC
path = "~/Desktop/leaf.txt"
df = read.ftable(path)
df = read.table(path)
heaf(df)
head(df)
path = "~/Desktop/leaf.txt"
df = read.table(path)
head(df)
PAR.start = 400
PAR.end = 700
NIR.start = 700
NIR.end = 2500
sum.par <- c()
sum.nir <- c()
for (i in 1:nrow(df)){
if (df[i,1] < PAR.end && df[i,2] > PAR.start){
sum.par <- append(sum.par, c(df[i,2]))
}
if (df[i,1] < NIR.end && df[i,2] > NIR.start){
sum.nir <- append(sum.nir, c(df[i,2]))
}
}
mean(sum.par)
sum.par <- c()
sum.nir <- c()
for (i in 1:nrow(df)){
if (df[i,1] < PAR.end && df[i,1] > PAR.start){
sum.par <- append(sum.par, c(df[i,2]))
}
if (df[i,1] < NIR.end && df[i,1] > NIR.start){
sum.nir <- append(sum.nir, c(df[i,2]))
}
}
mean(sum.par)
sum.par.r <- c()
PAR.start = 400
PAR.end = 700
NIR.start = 700
NIR.end = 2500
sum.par.r <- c()
sum.nir.r <- c()
sum.par.t <- c()
sum.nir.t <- c()
for (i in 1:nrow(df)){
if (df[i,1] < PAR.end && df[i,1] > PAR.start){
sum.par.r <- append(sum.par.r, c(df[i,2]))
sum.par.t <- append(sum.par.t, c(df[i,3]))
}
if (df[i,1] < NIR.end && df[i,1] > NIR.start){
sum.nir.r <- append(sum.nir.r, c(df[i,2]))
sum.nir.t <- append(sum.nir.t, c(df[i,3]))
}
}
mean(sum.par.r)
mean(sum.par.t)
mean(sum.nir.r)
mean(sum.nir.t)
sum.par.t / sum.par.r
mean(sum.par.t) / mean(sum.par.r)
mean(sum.nir.t) / mean(sum.nir.r)
sum.par.r <- c()
sum.nir.r <- c()
sum.par.t <- c()
sum.nir.t <- c()
for (i in 1:nrow(df)){
if (df[i,1] < PAR.end && df[i,1] > PAR.start){
sum.par.r <- append(sum.par.r, c(df[i,2]))
sum.par.t <- append(sum.par.t, c(df[i,3]))
}
if (df[i,1] < NIR.end && df[i,1] > NIR.start){
sum.nir.r <- append(sum.nir.r, c(df[i,2]))
sum.nir.t <- append(sum.nir.t, c(df[i,3]))
}
}
mean(sum.par.r)
mean(sum.par.t)
mean(sum.nir.r)
mean(sum.nir.t)
mean(sum.par.t) / mean(sum.par.r)
mean(sum.nir.t) / mean(sum.nir.r)
seq(1,3,1)
seq(0,3,1)
this.dir <- dirname(parent.frame(2)$ofile)
getSrcDirectory()[1]
getSrcDirectory()[1]
FILE.NAME = "SIF_results.txt"
df.sif.raw = read.table(file.path(IN.DIR, FILE.NAME))
IN.DIR = "~/google_drive/Share_with_MAC/FLiES/FLiES_SIF"
df.sif.raw = read.table(file.path(IN.DIR, FILE.NAME))
plot(df.sif.raw)
df.sif <- data.frame(df.sif.raw, "SIF")
colnames(df.sif) <- c("WL", "DATA", "TYPE")
p <- ggplot(df, aes(x = WL, y = DATA, group = TYPE, color = TYPE)) +
geom_line() +
#geom_smooth(method = loess) +
xlim(600, 900)
library(ggplot2)
p <- ggplot(df, aes(x = WL, y = DATA, group = TYPE, color = TYPE)) +
geom_line() +
#geom_smooth(method = loess) +
xlim(600, 900)
p
colnames(df.sif) <- c("WL", "DATA", "TYPE")
p <- ggplot(df.sif, aes(x = WL, y = DATA, group = TYPE, color = TYPE)) +
geom_line() +
#geom_smooth(method = loess) +
xlim(600, 900)
p
p <- ggplot(df.sif, aes(x = WL, y = DATA, group = TYPE, color = TYPE)) +
geom_line() +
#geom_smooth(method = loess) +
xlim(600, 900) +
ylim(0,0.2)
p
p <- ggplot(df.sif, aes(x = WL, y = DATA, group = TYPE, color = TYPE)) +
geom_line() +
#geom_smooth(method = loess) +
xlim(600, 900) +
ylim(0,0.05)
p <- ggplot(df.sif, aes(x = WL, y = DATA, group = TYPE, color = TYPE)) +
geom_line() +
#geom_smooth(method = loess) +
xlim(600, 900) +
ylim(0,0.05)
p
getSrcDirectory()
getSrcDirectory("drawSIF.r")
getSrcDirectory("drawSIF.R")
getSrcDirectory("drawSIF.R")[1]
getSrcDirectory("drawSIF.R")[0]
getSrcDirectory("drawSIF.R")
IN.DIR = "~/google_drive/Share_with_MAC/FLiES/FLiES_SIF"
OUT.DIR = "~/google_drive/Share_with_MAC/FLiES/FLiES_SIF"
FILE.NAME = "SIF_results.txt"
FILE1.NAME = "Fluor_Scat_Excited.txt"
setwd(OUT.DIR)
df.sif <- data.frame(df.sif.raw, "SIF")
colnames(df.sif) <- c("WL", "DATA", "TYPE")
df.scat <- data.frame(df.scat.excit[,1], df.scat.excit[,2], "SCATTER")
colnames(df.scat) <- c("WL", "DATA", "TYPE")
df.excit <- data.frame(df.scat.excit[,1], df.scat.excit[,3], "EXCITED")
colnames(df.excit) <- c("WL", "DATA", "TYPE")
df <- rbind(df.sif, df.scat, df.excit)
df.sif.raw = read.table(file.path(IN.DIR, FILE.NAME))
df.scat.excit = read.table(file.path(IN.DIR, FILE1.NAME))
df.sif <- data.frame(df.sif.raw, "SIF")
colnames(df.sif) <- c("WL", "DATA", "TYPE")
df.scat <- data.frame(df.scat.excit[,1], df.scat.excit[,2], "SCATTER")
colnames(df.scat) <- c("WL", "DATA", "TYPE")
df.excit <- data.frame(df.scat.excit[,1], df.scat.excit[,3], "EXCITED")
colnames(df.excit) <- c("WL", "DATA", "TYPE")
df <- rbind(df.sif, df.scat, df.excit)
df[1,1]
df[1,2]
df[1,3]
df[1,4]
subset(df, df$WL == 640 & df$TYPE =="SCATTER")
subset(df, df$WL == 640 & df$TYPE =="SCATTER")[2]
d2 = subset(df, df$WL == 640 & df$TYPE =="SCATTER")[2]
d1 = subset(df, df$WL == 640 & df$TYPE =="EXCITED")[2]
d0 = subset(df, df$WL == 640 & df$TYPE =="SIF")[2]
d0
d1
d2
d1 + d2
IN.DIR = "~/google_drive/Share_with_MAC/FLiES/FLiES_SIF"
OUT.DIR = "~/google_drive/Share_with_MAC/FLiES/FLiES_SIF"
FILE.NAME = "SIF_results.txt"
FILE1.NAME = "Fluor_Scat_Excited.txt"
setwd(OUT.DIR)
df.sif.raw = read.table(file.path(IN.DIR, FILE.NAME))
df.scat.excit = read.table(file.path(IN.DIR, FILE1.NAME))
df.sif.raw[10,]
df.scat.excit[10,]
df.sif.raw[60,]
df.scat.excit[60,]
